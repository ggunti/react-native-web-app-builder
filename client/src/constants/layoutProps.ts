import { Prop } from '../types';
import { viewStyleProps } from './viewStyleProps';

export const layoutProps: Record<string, Prop> = {
  alignContent: {
    name: 'Align content',
    optional: true,
    value: undefined,
    shownValue: 'stretch',
    oldValue: 'stretch',
    oldShownValue: 'stretch',
    renderType: 'string',
    selectorType: 'dropDown',
    selectorProps: {
      options: [
        { value: 'flex-start', label: 'Flex start' },
        { value: 'flex-end', label: 'Flex end' },
        { value: 'center', label: 'Center' },
        { value: 'stretch', label: 'Stretch' },
        { value: 'space-between', label: 'Space between' },
        { value: 'space-around', label: 'Space around' },
      ],
    },
  },
  alignItems: {
    name: 'Align items',
    optional: true,
    value: undefined,
    shownValue: 'stretch',
    oldValue: 'stretch',
    oldShownValue: 'stretch',
    renderType: 'string',
    selectorType: 'dropDown',
    selectorProps: {
      options: [
        { value: 'flex-start', label: 'Flex start' },
        { value: 'flex-end', label: 'Flex end' },
        { value: 'center', label: 'Center' },
        { value: 'stretch', label: 'Stretch' },
        { value: 'baseline', label: 'Baseline' },
      ],
    },
  },
  alignSelf: {
    name: 'Align self',
    optional: true,
    value: undefined,
    shownValue: 'auto',
    oldValue: 'auto',
    oldShownValue: 'auto',
    renderType: 'string',
    selectorType: 'dropDown',
    selectorProps: {
      options: [
        { value: 'auto', label: 'Auto' },
        { value: 'flex-start', label: 'Flex start' },
        { value: 'flex-end', label: 'Flex end' },
        { value: 'center', label: 'Center' },
        { value: 'stretch', label: 'Stretch' },
        { value: 'baseline', label: 'Baseline' },
      ],
    },
  },
  aspectRatio: {
    name: 'Aspect ratio',
    optional: true,
    value: undefined,
    shownValue: 1,
    oldValue: 1,
    oldShownValue: 1,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 30,
    },
  },
  borderBottomWidth: viewStyleProps.borderBottomWidth,
  borderEndWidth: {
    name: 'Border end width',
    optional: true,
    value: undefined,
    shownValue: 1,
    oldValue: 1,
    oldShownValue: 1,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 30,
    },
  },
  borderLeftWidth: viewStyleProps.borderLeftWidth,
  borderRightWidth: viewStyleProps.borderRightWidth,
  borderStartWidth: {
    name: 'Border start width',
    optional: true,
    value: undefined,
    shownValue: 1,
    oldValue: 1,
    oldShownValue: 1,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 30,
    },
  },
  borderTopWidth: viewStyleProps.borderTopWidth,
  borderWidth: viewStyleProps.borderWidth,
  bottom: {
    name: 'Bottom',
    optional: true,
    value: undefined,
    shownValue: 0,
    oldValue: 0,
    oldShownValue: 0,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  // iOS only
  direction: {
    name: 'Direction',
    optional: true,
    value: undefined,
    shownValue: 'inherit',
    oldValue: 'inherit',
    oldShownValue: 'inherit',
    renderType: 'string',
    selectorType: 'dropDown',
    selectorProps: {
      options: [
        { value: 'inherit', label: 'Inherit' },
        { value: 'ltr', label: 'Left to right' },
        { value: 'rtl', label: 'Right to left' },
      ],
    },
  },
  display: {
    name: 'Display',
    optional: true,
    value: undefined,
    shownValue: 'flex',
    oldValue: 'flex',
    oldShownValue: 'flex',
    renderType: 'string',
    selectorType: 'dropDown',
    selectorProps: {
      options: [
        { value: 'none', label: 'None' },
        { value: 'flex', label: 'Flex' },
      ],
    },
  },
  end: {
    name: 'End',
    optional: true,
    value: undefined,
    shownValue: 0,
    oldValue: 0,
    oldShownValue: 0,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  flex: {
    name: 'Flex',
    optional: true,
    value: undefined,
    shownValue: 1,
    oldValue: 1,
    oldShownValue: 1,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 0.1,
      minimumValue: 0,
      maximumValue: 1,
    },
  },
  flexBasis: {
    name: 'Flex basis',
    optional: true,
    value: undefined,
    shownValue: 1,
    oldValue: 1,
    oldShownValue: 1,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 0.1,
      minimumValue: 0,
      maximumValue: 1,
    },
  },
  flexDirection: {
    name: 'Flex direction',
    optional: true,
    value: undefined,
    shownValue: 'column',
    oldValue: 'column',
    oldShownValue: 'column',
    renderType: 'string',
    selectorType: 'dropDown',
    selectorProps: {
      options: [
        { value: 'column', label: 'Column' },
        { value: 'row', label: 'Row' },
        { value: 'column-reverse', label: 'Column reverse' },
        { value: 'row-reverse', label: 'Row reverse' },
      ],
    },
  },
  flexGrow: {
    name: 'Flex grow',
    optional: true,
    value: undefined,
    shownValue: 0,
    oldValue: 0,
    oldShownValue: 0,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 0.1,
      minimumValue: 0,
      maximumValue: 1,
    },
  },
  flexShrink: {
    name: 'Flex shrink',
    optional: true,
    value: undefined,
    shownValue: 1,
    oldValue: 1,
    oldShownValue: 1,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 0.1,
      minimumValue: 0,
      maximumValue: 1,
    },
  },
  flexWrap: {
    name: 'Flex wrap',
    optional: true,
    value: undefined,
    shownValue: 'nowrap',
    oldValue: 'nowrap',
    oldShownValue: 'nowrap',
    renderType: 'string',
    selectorType: 'dropDown',
    selectorProps: {
      options: [
        { value: 'nowrap', label: 'No wrap' },
        { value: 'wrap', label: 'Wrap' },
        { value: 'wrap-reverse', label: 'Wrap reverse' },
      ],
    },
  },
  height: {
    name: 'Height',
    optional: true,
    value: undefined,
    shownValue: 50,
    oldValue: 50,
    oldShownValue: 50,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  justifyContent: {
    name: 'Justify content',
    optional: true,
    value: undefined,
    shownValue: 'flex-start',
    oldValue: 'flex-start',
    oldShownValue: 'flex-start',
    renderType: 'string',
    selectorType: 'dropDown',
    selectorProps: {
      options: [
        { value: 'flex-start', label: 'Flex start' },
        { value: 'flex-end', label: 'Flex end' },
        { value: 'center', label: 'Center' },
        { value: 'space-between', label: 'Space between' },
        { value: 'space-around', label: 'Space around' },
        { value: 'space-evenly', label: 'Space evenly' },
      ],
    },
  },
  left: {
    name: 'Left',
    optional: true,
    value: undefined,
    shownValue: 0,
    oldValue: 0,
    oldShownValue: 0,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  margin: {
    name: 'Margin',
    optional: true,
    value: undefined,
    shownValue: 0,
    oldValue: 0,
    oldShownValue: 0,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  marginBottom: {
    name: 'Margin bottom',
    optional: true,
    value: undefined,
    shownValue: 0,
    oldValue: 0,
    oldShownValue: 0,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  marginEnd: {
    name: 'Margin end',
    optional: true,
    value: undefined,
    shownValue: 0,
    oldValue: 0,
    oldShownValue: 0,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  marginHorizontal: {
    name: 'Margin horizontal',
    optional: true,
    value: undefined,
    shownValue: 0,
    oldValue: 0,
    oldShownValue: 0,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  marginLeft: {
    name: 'Margin left',
    optional: true,
    value: undefined,
    shownValue: 0,
    oldValue: 0,
    oldShownValue: 0,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  marginRight: {
    name: 'Margin right',
    optional: true,
    value: undefined,
    shownValue: 0,
    oldValue: 0,
    oldShownValue: 0,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  marginStart: {
    name: 'Margin start',
    optional: true,
    value: undefined,
    shownValue: 0,
    oldValue: 0,
    oldShownValue: 0,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  marginTop: {
    name: 'Margin top',
    optional: true,
    value: undefined,
    shownValue: 0,
    oldValue: 0,
    oldShownValue: 0,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  marginVertical: {
    name: 'Margin vertical',
    optional: true,
    value: undefined,
    shownValue: 0,
    oldValue: 0,
    oldShownValue: 0,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  maxHeight: {
    name: 'Max height',
    optional: true,
    value: undefined,
    shownValue: 50,
    oldValue: 50,
    oldShownValue: 50,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  maxWidth: {
    name: 'Max width',
    optional: true,
    value: undefined,
    shownValue: 50,
    oldValue: 50,
    oldShownValue: 50,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  minHeight: {
    name: 'Min height',
    optional: true,
    value: undefined,
    shownValue: 50,
    oldValue: 50,
    oldShownValue: 50,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  minWidth: {
    name: 'Min width',
    optional: true,
    value: undefined,
    shownValue: 50,
    oldValue: 50,
    oldShownValue: 50,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  overflow: {
    name: 'Overflow',
    optional: true,
    value: undefined,
    shownValue: 'visible',
    oldValue: 'visible',
    oldShownValue: 'visible',
    renderType: 'string',
    selectorType: 'dropDown',
    selectorProps: {
      options: [
        { value: 'visible', label: 'Visible' },
        { value: 'hidden', label: 'Hidden' },
        { value: 'scroll', label: 'Scroll' },
      ],
    },
  },
  padding: {
    name: 'Padding',
    optional: true,
    value: undefined,
    shownValue: 0,
    oldValue: 0,
    oldShownValue: 0,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  paddingBottom: {
    name: 'Padding bottom',
    optional: true,
    value: undefined,
    shownValue: 0,
    oldValue: 0,
    oldShownValue: 0,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  paddingEnd: {
    name: 'Padding end',
    optional: true,
    value: undefined,
    shownValue: 0,
    oldValue: 0,
    oldShownValue: 0,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  paddingHorizontal: {
    name: 'Padding horizontal',
    optional: true,
    value: undefined,
    shownValue: 0,
    oldValue: 0,
    oldShownValue: 0,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  paddingLeft: {
    name: 'Padding left',
    optional: true,
    value: undefined,
    shownValue: 0,
    oldValue: 0,
    oldShownValue: 0,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  paddingRight: {
    name: 'Padding right',
    optional: true,
    value: undefined,
    shownValue: 0,
    oldValue: 0,
    oldShownValue: 0,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  paddingStart: {
    name: 'Padding start',
    optional: true,
    value: undefined,
    shownValue: 0,
    oldValue: 0,
    oldShownValue: 0,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  paddingTop: {
    name: 'Padding top',
    optional: true,
    value: undefined,
    shownValue: 0,
    oldValue: 0,
    oldShownValue: 0,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  paddingVertical: {
    name: 'Padding vertical',
    optional: true,
    value: undefined,
    shownValue: 0,
    oldValue: 0,
    oldShownValue: 0,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  position: {
    name: 'Position',
    optional: true,
    value: undefined,
    shownValue: 'relative',
    oldValue: 'relative',
    oldShownValue: 'relative',
    renderType: 'string',
    selectorType: 'dropDown',
    selectorProps: {
      options: [
        { value: 'relative', label: 'Relative' },
        { value: 'absolute', label: 'Absolute' },
      ],
    },
  },
  right: {
    name: 'Right',
    optional: true,
    value: undefined,
    shownValue: 0,
    oldValue: 0,
    oldShownValue: 0,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  start: {
    name: 'Start',
    optional: true,
    value: undefined,
    shownValue: 0,
    oldValue: 0,
    oldShownValue: 0,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  top: {
    name: 'Top',
    optional: true,
    value: undefined,
    shownValue: 0,
    oldValue: 0,
    oldShownValue: 0,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  width: {
    name: 'Width',
    optional: true,
    value: undefined,
    shownValue: 50,
    oldValue: 50,
    oldShownValue: 50,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 500,
    },
  },
  zIndex: {
    name: 'zIndex',
    optional: true,
    value: undefined,
    shownValue: 0,
    oldValue: 0,
    oldShownValue: 0,
    renderType: 'number',
    selectorType: 'slider',
    selectorProps: {
      step: 1,
      minimumValue: 0,
      maximumValue: 100,
    },
  },
};
